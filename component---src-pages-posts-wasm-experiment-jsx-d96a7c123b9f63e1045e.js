(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{143:function(e,t,n){"use strict";n.r(t);n(74);var a=n(0),i=n.n(a),r=(n(148),n(161)),o=n.n(r),s=n(178),c=n.n(s),l=n(155),d=n(153),m=n(456),h=n.n(m),p=n(179),u=n.n(p);n(180);t.default=function(){var e=i.a.createElement(o.a,{source:h.a});return i.a.createElement(l.a,null,i.a.createElement(d.a,{title:"Home",keywords:["gatsby","application","react"]}),i.a.createElement("div",{className:"content_container"},i.a.createElement("div",{className:"inner_container container p-5"},i.a.createElement("div",{id:"post_container",className:"row"},i.a.createElement("div",{className:"col-md-2"}),i.a.createElement("div",{className:"col-md-8"},i.a.createElement("a",{href:"https://github.com/mahepe/box2d-wasm-experiment"},i.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"50",height:"50",viewBox:"0 0 24 24"},i.a.createElement("path",{d:"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}))),e),i.a.createElement("div",{className:"col-md-2"})))),function(){try{"undefined"!=typeof document&&c()(document).ready(function(){document.querySelectorAll("pre code").forEach(function(e){u.a.highlightBlock(e)}),c()("h2").addClass("mt-5 mb-5"),c()("h3").addClass("mt-5 mb-4"),c()("h4").addClass("mt-5 mb-4")})}catch(e){}}())}},148:function(e,t,n){"use strict";n.d(t,"b",function(){return d});var a=n(0),i=n.n(a),r=n(4),o=n.n(r),s=n(32),c=n.n(s);n.d(t,"a",function(){return c.a}),n.d(t,"c",function(){return s.withPrefix});n(149);var l=i.a.createContext({}),d=function(e){return i.a.createElement(l.Consumer,null,function(t){return e.data||t[e.query]&&t[e.query].data?(e.render||e.children)(e.data?e.data.data:t[e.query].data):i.a.createElement("div",null,"Loading (StaticQuery)")})};d.propTypes={data:o.a.object,query:o.a.string.isRequired,render:o.a.func,children:o.a.func}},149:function(e,t,n){var a;e.exports=(a=n(152))&&a.default||a},152:function(e,t,n){"use strict";n.r(t);n(33);var a=n(0),i=n.n(a),r=n(4),o=n.n(r),s=n(54),c=n(2),l=function(e){var t=e.location,n=c.default.getResourcesForPathnameSync(t.pathname);return i.a.createElement(s.a,Object.assign({location:t,pageResources:n},n.json))};l.propTypes={location:o.a.shape({pathname:o.a.string.isRequired}).isRequired},t.default=l},153:function(e,t,n){"use strict";var a=n(154),i=n(0),r=n.n(i),o=n(4),s=n.n(o),c=n(150),l=n.n(c),d=n(148);function m(e){var t=e.description,n=e.lang,i=e.meta,o=e.keywords,s=e.title;return r.a.createElement(d.b,{query:h,render:function(e){var a=t||e.site.siteMetadata.description;return r.a.createElement(l.a,{htmlAttributes:{lang:n},title:s,titleTemplate:"%s | "+e.site.siteMetadata.title,meta:[{name:"description",content:a},{property:"og:title",content:s},{property:"og:description",content:a},{property:"og:type",content:"website"},{name:"twitter:card",content:"summary"},{name:"twitter:creator",content:e.site.siteMetadata.author},{name:"twitter:title",content:s},{name:"twitter:description",content:a}].concat(o.length>0?{name:"keywords",content:o.join(", ")}:[]).concat(i)})},data:a})}m.defaultProps={lang:"en",meta:[],keywords:[]},m.propTypes={description:s.a.string,lang:s.a.string,meta:s.a.array,keywords:s.a.arrayOf(s.a.string),title:s.a.string.isRequired},t.a=m;var h="1025518380"},154:function(e){e.exports={data:{site:{siteMetadata:{title:"Matias Heikkilä's homepage",description:"I'm doing a PhD in statistics and I write code sometimes.",author:"Matias Heikkilä"}}}}},155:function(e,t,n){"use strict";n(73);var a=n(156),i=n(0),r=n.n(i),o=n(150),s=n.n(o),c=n(4),l=n.n(c),d=n(148),m=n(160);n(158);m.a.initialize("UA-135033691-1"),"undefined"!=typeof window&&m.a.pageview(window.location.pathname+window.location.search);var h=function(e){var t=e.children;return r.a.createElement(d.b,{query:"755544856",render:function(e){return r.a.createElement(r.a.Fragment,null,r.a.createElement(s.a,null,r.a.createElement("link",{rel:"stylesheet",href:"https://maxcdn.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css",integrity:"sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS",crossOrigin:"anonymous"})),r.a.createElement("div",null,r.a.createElement("div",null,r.a.createElement("nav",{className:"navbar navbar-light"},r.a.createElement(d.a,{id:"back_to_main",to:"/"},r.a.createElement("span",{id:"hello"},"Hello"),",",r.a.createElement("br",null),"I'm Matias"))),r.a.createElement("main",null,t),r.a.createElement("footer",null,r.a.createElement("div",{className:"container text-center"},"© ",(new Date).getFullYear(),", Built with"," ",r.a.createElement("a",{href:"https://www.gatsbyjs.org"},"Gatsby"),".",r.a.createElement(d.a,{to:"/privacy"}," Privacy policy")))))},data:a})};h.propTypes={children:l.a.node.isRequired},t.a=h},156:function(e){e.exports={data:{site:{siteMetadata:{title:"Matias Heikkilä's homepage"}}}}},456:function(e,t){e.exports='## Using Box2D and SDL2 in a WASM project\n\n**TL;DR:** *After some initial problems with CMake I had a great experience with\nC++ to WASM. During this experiment, things that compiled natively, also\ncompiled to WASM without any problems.*\n\nRecently on [HN](https://news.ycombinator.com/), there have been a lot of\n[WASM](https://webassembly.org/)-related posts. The ability to run native code\nin the browser sounds pretty amazing and I was blown away by [Funky\nKarts](https://www.funkykarts.rocks/demo.html), a C++ game that the author\ncompiled to WASM (and provided pretty detailed\n[documentation](https://www.rossis.red/wasm.html#emscripten) of the\nprocess). So far, WASM is a nascent technology and the success of your project\nshouldn\'t probably depend on it. However, I wanted to get some sort of an idea\nhow reliable it is at the moment and what would be possible with it. As a\nresult, I produced [this](https://mahepe.github.io/box2d-wasm-experiment) tiny\ndemo that renders things with SDL2 and uses\n[Box2D](https://github.com/erincatto/Box2D) for movement and\ncollision-detection. It looks pretty terrible, but I\'m left convinced\nthat it\'s possible to do *something* with WASM and even use some well-known\nlibraries. Check the [repo](https://github.com/mahepe/box2d-wasm-experiment) for\nfurther details.\n\n### Building\n\nI\'m under the impression that at the moment CMake is the easiest way to build\nyour C++ WASM project. I had no prior experience with CMake so it was pretty\npainful to get the compile commands right at first. However, after getting into\nterms with it, I really prefer CMake over graphical IDEs I\'m used to when\nlinking C++.\n\nWe can define a CMake script which enables us to compile to native target like\nthis:\n```bash\ncmake ..\nmake\n```\nAnd to WASM target like this:\n```bash\nemcmake cmake ..\nemmake make\n```\nSee the [full\nscript](https://github.com/mahepe/box2d-wasm-experiment/blob/master/CMakeLists.txt#L1-L35).\n\n#### Some details\n\nThis tells the linker where the includes and the sources are. At it\'s present\nform, it takes everything from `./src/`.\n```\ninclude_directories(${CMAKE_SOURCE_DIR}/include/Box2D/)\n\nfile(GLOB SRC\n    "src/*.h"\n    "src/*.cpp"\n)\n```\nWe can use a single CMake script for both native and WASM target.\n```cmake\nif (${CMAKE_SYSTEM_NAME} STREQUAL "Emscripten")\n\n    # If build target WASM.\n\nelse ()\n\n    # If build target native.\n\nendif ()\n```\n\nSince the native and WASM libraries have to be compiled with different\ncompilers, you\'ll need to take that into account in linking the project. In the\nfollowing we put WASM libs to `./lib/web/` and native libs to `./lib/native/`.\n\n```cmake\nif (${CMAKE_SYSTEM_NAME} STREQUAL "Emscripten")\n  # ...\n  link_directories(${CMAKE_SOURCE_DIR}/lib/web)\n  # ...\nelse ()\n  # ...\n  link_directories(${CMAKE_SOURCE_DIR}/lib/native)\n  # ...\nendif ()\n```\n\nIt\'s worth pointing out that we use a different compiler for WASM.\n\n```cmake\nif (${CMAKE_SYSTEM_NAME} STREQUAL "Emscripten")\n  # ...\n  set(CMAKE_CXX_COMPILER "em++")\n  # ...\nelse ()\n  # ...\nendif ()\n```\n\nYou\'ll need to make similar changes to compile commands when compiling library\nthat will be linked with an emscripten project.\n\n\n### About the C++ part\n\nThe demo code isn\'t very interesting, I\'ll describe it on a general\nlevel. The main loop is extremely generic.\n```C++\nvoid main_loop() {\n  update();\n  draw();\n}\n```\n\n#### The update function\n\nThe update function measures the time since the last frame and simulates physics\nbased on the elapsed time (`Step` is a function defined in Box2D `World`\nclass). Then any SDL events (such as keydown) are processed by first turning\nthem our custom event object which are then passed to game objects (physical\nthings you see on the screen).\n```C++\nvoid update() {\n  // Tick the timer and simulate physics.\n  timer.tick();\n  world->Step(timer.delta, 1, 1);\n\n  // Loop through SDL_Events\n  SDL_Event e;\n  if (SDL_PollEvent(&e)) {\n\n    // Parse the SDL_Event to our custom event object.\n    std::unique_ptr<EventData> event_data =\n        std::unique_ptr<EventData>(new EventData(e));\n\n    // Loop through objects\n    for (auto const &o : game_state->objects) {\n      o->handle_event(event_data.get());\n    }\n\n    // Break from the main loop if quit received.\n    run = !event_data->quit;\n  }\n}\n```\nBy the way, notice a design-decision here. I wanted to be able to pass event\ndata to all game objects, but they should respond to events differently based on\nwhether they are, for example, the player or some other object. After [digging\naround](https://stackoverflow.com/a/307793/3616581) a bit it seems that the OOP\nway to do this is to inherit and override: The vector `game_state->objects`\ncontains objects of a generic type `GameObject` which defines a virtual event\nhandler that does nothing.\n```C++\nclass GameObject {\n\n/* ... */\n\n  virtual void handle_event(EventData *event_data) {}\n\n/* ... */\n\n};\n```\nThe `Player` class inherits `GameObject` and overrides the superclass\n`handle_event` to change the player velocity.\n```C++\nclass Player : public GameObject {\n\n/* ... */\n\n  void handle_event(EventData *event_data) override {\n  // Alter the player velocity.\n  }\n\n/* ... */\n\n};\n```\nSee the [complete\ngame_object.h](https://github.com/mahepe/box2d-wasm-experiment/blob/626a8c81c6e1fac32967eef9b3cb893a554266f7/src/game_object.h#L1-L78)\nfor details.\n\n#### The render function\n\nThe render function is quite self-explanatory.\n```C++\nvoid draw() {\n\n  // Clear the screen.\n  SDL_RenderClear(interface->renderer.get());\n\n  // Invoke render() of each GameObject.\n  for (auto const &o : game_state->objects) {\n    o->render(interface.get(), game_state->camera->GetPosition(), screen_size);\n  }\n\n  // Flip the buffers.\n  SDL_RenderPresent(interface->renderer.get());\n}\n```\n[The\nimplementation](https://github.com/mahepe/box2d-wasm-experiment/blob/626a8c81c6e1fac32967eef9b3cb893a554266f7/src/game_object.h#L28-L36)\nof `render()` in `GameObject` takes care of positioning the sprites according to\nthe Box2D body positions.\n\n'}}]);
//# sourceMappingURL=component---src-pages-posts-wasm-experiment-jsx-d96a7c123b9f63e1045e.js.map